#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
import markdown2

from django import template
from django.template.defaultfilters import stringfilter
from django.utils.encoding import force_text
from django.utils.safestring import mark_safe

register = template.Library()

@register.filter(is_safe=True)
@stringfilter
def custom_markdown(value):
    return mark_safe(markdown.markdown(force_text(value),
        extras=["markdown.extensions.extra","markdown.extensions.codehilite","markdown.extensions.toc","markdown.extensions.table"]))
"""
from django import template
import mistune
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import html

register = template.Library()



class HighlightRenderer(mistune.Renderer):
    def block_code(self, code, lang):
        if not lang:
            return '\n<pre><code>%s</code></pre>\n' % \
                mistune.escape(code)
        lexer = get_lexer_by_name(lang, stripall=True)
        formatter = html.HtmlFormatter()
        return highlight(code, lexer, formatter)
    def table(self,header, body):
        print body
@register.filter
def custom_markdown(value):
    renderer = HighlightRenderer()

    md = mistune.Markdown(renderer,hard_wrap=True,escape=True)

    #md=m.Markdown(renderer,
     #  extensions=m.EXT_FENCED_CODE | m.EXT_NO_INTRA_EMPHASIS)
    #mdp = mistune.Markdown(escape=True, renderer=renderer)
    return md(value)
